{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import EventEmitter from 'node:events';\nimport urlLib from 'node:url';\nimport crypto from 'node:crypto';\nimport stream, {PassThrough as PassThroughStream} from 'node:stream';\nimport {IncomingMessage} from 'node:http';\nimport normalizeUrl from '@esm2cjs/normalize-url';\nimport getStream from 'get-stream';\nimport CachePolicy from 'http-cache-semantics';\nimport Response from '@esm2cjs/responselike';\nimport Keyv from 'keyv';\nimport mimicResponse from '@esm2cjs/mimic-response';\nimport {RequestFn, StorageAdapter, CacheResponse, CacheValue, CacheableOptions, UrlOption, CacheError, RequestError, Emitter, CacheableRequestFunction} from './types.js';\n\ntype Func = (...args: any[]) => any;\n\nclass CacheableRequest {\n\tcache: StorageAdapter;\n\tcacheRequest: RequestFn;\n\thooks: Map<string, Func> = new Map<string, Func>();\n\tconstructor(cacheRequest: RequestFn, cacheAdapter?: StorageAdapter | string) {\n\t\tif (cacheAdapter instanceof Keyv) {\n\t\t\tthis.cache = cacheAdapter;\n\t\t} else if (typeof cacheAdapter === 'string') {\n\t\t\tthis.cache = new Keyv({\n\t\t\t\turi: cacheAdapter,\n\t\t\t\tnamespace: 'cacheable-request',\n\t\t\t});\n\t\t} else {\n\t\t\tthis.cache = new Keyv({\n\t\t\t\tstore: cacheAdapter,\n\t\t\t\tnamespace: 'cacheable-request',\n\t\t\t});\n\t\t}\n\n\t\tthis.request = this.request.bind(this);\n\t\tthis.cacheRequest = cacheRequest;\n\t}\n\n\trequest = () => (options: CacheableOptions,\n\t\tcb?: (response: CacheResponse) => void): Emitter => {\n\t\tlet url;\n\t\tif (typeof options === 'string') {\n\t\t\turl = normalizeUrlObject(urlLib.parse(options));\n\t\t\toptions = {};\n\t\t} else if (options instanceof urlLib.URL) {\n\t\t\turl = normalizeUrlObject(urlLib.parse(options.toString()));\n\t\t\toptions = {};\n\t\t} else {\n\t\t\tconst [pathname, ...searchParts] = (options.path ?? '').split('?');\n\t\t\tconst search = searchParts.length > 0\n\t\t\t\t? `?${searchParts.join('?')}`\n\t\t\t\t: '';\n\t\t\turl = normalizeUrlObject({...options, pathname, search});\n\t\t}\n\n\t\toptions = {\n\t\t\theaders: {},\n\t\t\tmethod: 'GET',\n\t\t\tcache: true,\n\t\t\tstrictTtl: false,\n\t\t\tautomaticFailover: false,\n\t\t\t...options,\n\t\t\t...urlObjectToRequestOptions(url),\n\t\t};\n\t\toptions.headers = Object.fromEntries(entries(options.headers).map(([key, value]) => [(key as string).toLowerCase(), value]));\n\t\tconst ee: Emitter = new EventEmitter() as Emitter;\n\t\tconst normalizedUrlString = normalizeUrl(urlLib.format(url), {\n\t\t\tstripWWW: false, // eslint-disable-line @typescript-eslint/naming-convention\n\t\t\tremoveTrailingSlash: false,\n\t\t\tstripAuthentication: false,\n\t\t});\n\t\tlet key = `${options.method}:${normalizedUrlString}`;\n\t\t// POST, PATCH, and PUT requests may be cached, depending on the response\n\t\t// cache-control headers. As a result, the body of the request should be\n\t\t// added to the cache key in order to avoid collisions.\n\t\tif (options.body && options.method !== undefined && ['POST', 'PATCH', 'PUT'].includes(options.method)) {\n\t\t\tif (options.body instanceof stream.Readable) {\n\t\t\t\t// Streamed bodies should completely skip the cache because they may\n\t\t\t\t// or may not be hashable and in either case the stream would need to\n\t\t\t\t// close before the cache key could be generated.\n\t\t\t\toptions.cache = false;\n\t\t\t} else {\n\t\t\t\tkey += `:${crypto.createHash('md5').update(options.body).digest('hex')}`;\n\t\t\t}\n\t\t}\n\n\t\tlet revalidate: any = false;\n\t\tlet madeRequest = false;\n\t\tconst makeRequest = (options_: any) => {\n\t\t\tmadeRequest = true;\n\t\t\tlet requestErrored = false;\n\t\t\tlet requestErrorCallback: (...args: any[]) => void = () => {/* do nothing */};\n\n\t\t\tconst requestErrorPromise = new Promise<void>(resolve => {\n\t\t\t\trequestErrorCallback = () => {\n\t\t\t\t\tif (!requestErrored) {\n\t\t\t\t\t\trequestErrored = true;\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t\tconst handler = async (response: any) => {\n\t\t\t\tif (revalidate) {\n\t\t\t\t\tresponse.status = response.statusCode;\n\t\t\t\t\tconst revalidatedPolicy = CachePolicy.fromObject(revalidate.cachePolicy).revalidatedPolicy(options_, response);\n\t\t\t\t\tif (!revalidatedPolicy.modified) {\n\t\t\t\t\t\tresponse.resume();\n\t\t\t\t\t\tawait new Promise(resolve => {\n\t\t\t\t\t\t\t// Skipping 'error' handler cause 'error' event should't be emitted for 304 response\n\t\t\t\t\t\t\tresponse\n\t\t\t\t\t\t\t\t.once('end', resolve);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst headers = convertHeaders(revalidatedPolicy.policy.responseHeaders());\n\t\t\t\t\t\tresponse = new Response({statusCode: revalidate.statusCode, headers, body: revalidate.body, url: revalidate.url});\n\t\t\t\t\t\tresponse.cachePolicy = revalidatedPolicy.policy;\n\t\t\t\t\t\tresponse.fromCache = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!response.fromCache) {\n\t\t\t\t\tresponse.cachePolicy = new CachePolicy(options_, response, options_);\n\t\t\t\t\tresponse.fromCache = false;\n\t\t\t\t}\n\n\t\t\t\tlet clonedResponse;\n\t\t\t\tif (options_.cache && response.cachePolicy.storable()) {\n\t\t\t\t\tclonedResponse = cloneResponse(response);\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst bodyPromise = getStream.buffer(response);\n\t\t\t\t\t\t\tawait Promise.race([\n\t\t\t\t\t\t\t\trequestErrorPromise,\n\t\t\t\t\t\t\t\tnew Promise(resolve => response.once('end', resolve)), // eslint-disable-line no-promise-executor-return\n\t\t\t\t\t\t\t\tnew Promise(resolve => response.once('close', resolve)), // eslint-disable-line no-promise-executor-return\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t\tconst body = await bodyPromise;\n\t\t\t\t\t\t\tlet value: CacheValue = {\n\t\t\t\t\t\t\t\turl: response.url,\n\t\t\t\t\t\t\t\tstatusCode: response.fromCache ? revalidate.statusCode : response.statusCode,\n\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\tcachePolicy: response.cachePolicy.toObject(),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tlet ttl = options_.strictTtl ? response.cachePolicy.timeToLive() : undefined;\n\t\t\t\t\t\t\tif (options_.maxTtl) {\n\t\t\t\t\t\t\t\tttl = ttl ? Math.min(ttl, options_.maxTtl) : options_.maxTtl;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (this.hooks.size > 0) {\n\t\t\t\t\t\t\t\t/* eslint-disable no-await-in-loop */\n\t\t\t\t\t\t\t\tfor (const key_ of this.hooks.keys()) {\n\t\t\t\t\t\t\t\t\tvalue = await this.runHook(key_, value, response);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t/* eslint-enable no-await-in-loop */\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tawait this.cache.set(key, value, ttl);\n\t\t\t\t\t\t} catch (error: any) {\n\t\t\t\t\t\t\tee.emit('error', new CacheError(error));\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t} else if (options_.cache && revalidate) {\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.cache.delete(key);\n\t\t\t\t\t\t} catch (error: any) {\n\t\t\t\t\t\t\tee.emit('error', new CacheError(error));\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}\n\n\t\t\t\tee.emit('response', clonedResponse ?? response);\n\t\t\t\tif (typeof cb === 'function') {\n\t\t\t\t\tcb(clonedResponse ?? response);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst request_ = this.cacheRequest(options_, handler);\n\t\t\t\trequest_.once('error', requestErrorCallback);\n\t\t\t\trequest_.once('abort', requestErrorCallback);\n\t\t\t\trequest_.once('destroy', requestErrorCallback);\n\t\t\t\tee.emit('request', request_);\n\t\t\t} catch (error: any) {\n\t\t\t\tee.emit('error', new RequestError(error));\n\t\t\t}\n\t\t};\n\n\t\t(async () => {\n\t\t\tconst get = async (options_: any) => {\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tconst cacheEntry = options_.cache ? await this.cache.get(key) : undefined;\n\n\t\t\t\tif (typeof cacheEntry === 'undefined' && !options_.forceRefresh) {\n\t\t\t\t\tmakeRequest(options_);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst policy = CachePolicy.fromObject(cacheEntry.cachePolicy);\n\t\t\t\tif (policy.satisfiesWithoutRevalidation(options_) && !options_.forceRefresh) {\n\t\t\t\t\tconst headers = convertHeaders(policy.responseHeaders());\n\t\t\t\t\tconst response: any = new Response({statusCode: cacheEntry.statusCode, headers, body: cacheEntry.body, url: cacheEntry.url});\n\t\t\t\t\tresponse.cachePolicy = policy;\n\t\t\t\t\tresponse.fromCache = true;\n\t\t\t\t\tee.emit('response', response);\n\t\t\t\t\tif (typeof cb === 'function') {\n\t\t\t\t\t\tcb(response);\n\t\t\t\t\t}\n\t\t\t\t} else if (policy.satisfiesWithoutRevalidation(options_) && Date.now() >= policy.timeToLive() && options_.forceRefresh) {\n\t\t\t\t\tawait this.cache.delete(key);\n\t\t\t\t\toptions_.headers = policy.revalidationHeaders(options_);\n\t\t\t\t\tmakeRequest(options_);\n\t\t\t\t} else {\n\t\t\t\t\trevalidate = cacheEntry;\n\t\t\t\t\toptions_.headers = policy.revalidationHeaders(options_);\n\t\t\t\t\tmakeRequest(options_);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst errorHandler = (error: Error) => ee.emit('error', new CacheError(error));\n\t\t\tif (this.cache instanceof Keyv) {\n\t\t\t\tconst cachek = this.cache;\n\t\t\t\tcachek.once('error', errorHandler);\n\t\t\t\tee.on('error', () => cachek.removeListener('error', errorHandler));\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait get(options);\n\t\t\t} catch (error: any) {\n\t\t\t\tif (options.automaticFailover && !madeRequest) {\n\t\t\t\t\tmakeRequest(options);\n\t\t\t\t}\n\n\t\t\t\tee.emit('error', new CacheError(error));\n\t\t\t}\n\t\t})();\n\n\t\treturn ee;\n\t};\n\n\taddHook = (name: string, fn: Func) => {\n\t\tif (!this.hooks.has(name)) {\n\t\t\tthis.hooks.set(name, fn);\n\t\t}\n\t};\n\n\tremoveHook = (name: string) => this.hooks.delete(name);\n\n\tgetHook = (name: string) => this.hooks.get(name);\n\n\trunHook = async (name: string, ...args: any[]): Promise<CacheValue> => this.hooks.get(name)?.(...args);\n}\n\nconst entries = Object.entries as <T>(object: T) => Array<[keyof T, T[keyof T]]>;\n\nconst cloneResponse = (response: IncomingMessage) => {\n\tconst clone = new PassThroughStream({autoDestroy: false});\n\tmimicResponse(response, clone);\n\n\treturn response.pipe(clone);\n};\n\nconst urlObjectToRequestOptions = (url: any) => {\n\tconst options: UrlOption = {...url};\n\toptions.path = `${url.pathname || '/'}${url.search || ''}`;\n\tdelete options.pathname;\n\tdelete options.search;\n\treturn options;\n};\n\nconst normalizeUrlObject = (url: any) =>\n\t// If url was parsed by url.parse or new URL:\n\t// - hostname will be set\n\t// - host will be hostname[:port]\n\t// - port will be set if it was explicit in the parsed string\n\t// Otherwise, url was from request options:\n\t// - hostname or host may be set\n\t// - host shall not have port encoded\n\t({\n\t\tprotocol: url.protocol,\n\t\tauth: url.auth,\n\t\thostname: url.hostname || url.host || 'localhost',\n\t\tport: url.port,\n\t\tpathname: url.pathname,\n\t\tsearch: url.search,\n\t});\n\nconst convertHeaders = (headers: CachePolicy.Headers) => {\n\tconst result: any = [];\n\tfor (const name of Object.keys(headers)) {\n\t\tresult[name.toLowerCase()] = headers[name];\n\t}\n\n\treturn result;\n};\n\nexport default CacheableRequest;\nexport * from './types.js';\nexport const onResponse = 'onResponse';\n"],
  "mappings": "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",
  "names": ["urlLib", "key", "EventEmitter", "normalizeUrl", "stream", "crypto", "CachePolicy", "Response", "getStream", "Keyv", "PassThroughStream", "mimicResponse"]
}
